# jsp02

JSP란?
	==> Web 서버가 클라이언트에게 응답하기 위해 필요한 문서(html문서)를
		만들어주는 언어의 일종이다.
		
		Web Server가 가진 엔진이 실행할 수 있는 언어가 따로 있다.
		이것을 우리는 Server Side Page(SSP)라고 말한다.
		
		예 ]
			
			대표적으로
			ASP(Active Server Page)
			==> Visual Basic 이라는 언어를 기본
			
			ASP.NET
			==> C#을 기본
			
			PHP
			==> CGI 언어를 배경으로해서 만들어진 새로운 언어
			
			JSP(Java Server Page)
			==> Java 언어를 기본
			
	결론적으로
		우리가 앞으로 배우는 내용은
		서버가 실행해서 클라이언트에게 응답하는 응답문서를 만들기위한
		언어를 배우는 것이 된다.
		

환경 설정
	
	1. Web (Application) Server 를 설치한다.
		==> HTTP 프로토콜에 의해서 클라이언트의 요청을 받아서 해결하는
			서버를 부르는 말이다.
			
			예 ] 
				톰캣, 레진, IIS, 아파치, .....
				
		우리는 톰캣을 설치해서 운영하도록 한다.
		
		설치 방법 ]
			
			1. 압축 파일을 다운받는다. ( 8.5.xx)
				==> https://tomcat.apache.org
			2. 압축파일을 원하는 위치에 해제한다.
			3. 환경변수를 설정하고
				Path에 등록해준다.
				
				만들어야 할 환경변수 ]
					CATALINA_BASE, CATALINA_HOME
					
				Path에 등록 ]
					%CATALINA_BASE%\bin\
					
		참고 ]
			환경변수가 준비되고 패스에 등록이 되면 
			톰캣에 포함된 명령들은 어느위치에서든지 사용할 수 있게 된다.
			이때 톰캣이 제대로 준비되었는지 확인하는 방법은
				version.bat
			을 cmd 창에서 실행시켜서 버젼이 출력되는지 확인해보면 된다.
					
	2. 프로그램 편집을 위한 편집기( 통합개발환경: IDE - 이클립스 ) 설치
		
		방법 ]
			1. 이클립스 홈페이지에서 
				2020.06 버젼의 엔터프라이즈 자바 디벨로퍼 에디션(jee)을 다운받는다.
				
			2. 프로젝트 폴더에 app라는 폴더를 만들고 그 폴더에 저장하고 압축을 해제한다.
			3. 워크스페이스(작업공간)는 프로젝트 폴더에 source라는 폴더를 만들고
				그 폴더로 지정한다.
				
			4. 프로젝트를 만든다.
				(웹사이트 한개를 개발하기 위한 프로젝트이다.)
				1) File - New - Other - Web 폴더 펼치고
				2) Dynamic Web Project를 선택한다.
				3) 프로젝트 이름을 지정하고
				4) Dynamic Web Module 을 3.1로 지정한다.
				
	3. 프로젝트와 웹 서버를 연결
		==> 현재 진행중인 프로젝트 안에 소스가 어떤 웸서버의 처리를 
			담당할지를 지정하는 것
			
		연결 방법 ]
			1. Window - Show View - Servers를 선택...
			2. 아직 서버와 연결이 되지 않은 상태이므로
				서버리스트에 서버가 없게 된다.
				
				New - Server 메뉴를 선택한다.
				
			3. 서버를 선택한다.
				우리의 경우
				Apache - Tomcat8.5 를 선택한다.
				
			4. Tomcat installation directory를 압축을 풀어서 설치해놓은 
				톰캣 폴더를 지정한다.
			5. 프로젝트 리스트의 프로젝트중 서버 추가할 프로젝트를 선택해서
				add 버튼을 클릭해서 서버에 프로젝트를 추가해준다.
				
	4. JSP에서 사용할 외부 라이브러를 설치한다.
		==> 톰캣에서 제공하는 라이브러리를 JSP에서 사용하도록 만들어 주는 것이 된다.
		
		참고 ]
			먼저 톰캣이 설치된 폴더의 lib 폴더에서
				jsp-api.jar, servlet-api.jar
			찾아서 복사하고 
			WEB-INF/lib 폴더에 복사해둔다.
		
		1) 프로젝트를 선택해서 마우스 오른쪽 버튼을 클릭하고
			Properties 메뉴를 선택한다.
		2) 왼쪽화면에서 Java Build Path 를 선택한다.
		3) 오른쪽 화면에서 Libraries 탭을 선택하고
		4) 오른쪽 버튼중 Add External JARs를 선택한다.
		5) 톰캣이 제공하는 jsp-api.jar, servlet-api.jar 를 선택한다.
		
		
		참고 ]
			프로젝트가 만들어지면 이클립스의 기본 설정으로 
			프로젝트가 셋팅이 된다.
			이때 우리가 원하는 설정으로 셋팅하려면 
			프로젝트를 선택하고 마우스 오른쪽 버튼을 클릭해서 
			Properties 메뉴를 선택하고
			왼쪽의 메뉴중 
				Project Facets
			을 선택해서 버젼들을 우리의 환경에 맞춰야 한다. 
---------------------------------------------------------------------------

여기까지가 기본 셋팅이다.
참고로 모든 개발은 환경 셋팅부터 시작하게 된다.
따라서 프로젝트에 참여를 하려면 개발환경 셋팅이 되어야 할 것이고
이것이 안되면 프로젝트에 참여를 할 수 없게 된다.

여러분들은 위의 과정을 혼자서 다른사람의 도움 없이 할 수 있도록 
연습이 되어야할 것이다.		

---------------------------------------------------------------------------
---------------------------------------------------------------------------
프로젝트 폴더 구조
	
	1. Java Resource
		==> JSP가 사용할 자바적인 요소(클래스)를 코딩하는 위치
			Java Resource/src/
			하위에 패키지를 만들고
			그 안에 필요한 클래스를 만들어서 사용하면 된다.
			
	2. WebContent
		==> 이 위치가 실제 JSP, HTML 문서나 JS, CSS 등 
			응답에 필요한 문서를 작성하는 위치
			
			WebContent
			==> 웹서버에 직접 요청하는 문서를 저장하는 폴더
			
			WebContent/WEB-INF
			==> Servlet 프로그램에 의해서 요청하는 문서를 저장할 폴더
			
		참고 ]
			서블릿
				서버 애플릿 의 약자로 서버에서 실행되는 애플릿을 의미한다.
				서블릿의 역할은 
				사용자가 요청하는 요청내용에 따라서 
				응답문서를 만들어서 응답해주는 역할을 한다.
				
				
---------------------------------------------------------------------------
서버 환경 설정
	서버의 환경은 xml 파일을 이용해서 환경을 설정하도록 하고 있다.
	
	참고 ]
		XML 파일?
		(eXtension Markup Language의 약자)
		==> 확장성이 있는 마크업 언어
		
		태그를 이용해서 파일의 내용을 구분하도록 만들어지는 문서를 의미하며
		이 중에 하나가 HTML(Hyper Text Markup Language) 문서이다.
		
		이때 HTML의 경우는 사용하는 태그가 이미 결정되어 있지만...
		xml은 사용자가 태그의 종류를 정한 후
		그 태그를 이용해서 문서를 만드는 것을 말한다.
		
		이 문서는 주로 프로그램의 환경 설정을 하기 위한 목적으로
		많이 사용되는 문서이다.
		(참고 - 데이터 전송용으로도 많이 사용한다.)
		
		프로그램은 프로그램을 실행하기 전에
		먼저 XML파일을 읽은 후
		그 파일의 태그를 분석한다.
		==> 이 작업을 우리는 파싱 시킨다. 라고 표현한다.
		
		그리고 그 파싱된 결과를 프로그램에서 이용하도록 하는 절차를 가진다.
		
		***
		결론적으로 어떤 프로그램의 실행 환경(시작환경)을 바꾸고 싶으면...
		우리는 xml파일에서 그 환경을 설정하는 부분을 찾아서
		수정하면 된다.
		
		참고 ]
			파싱을 하기 위해서는 그 xml 문서에 있는 태그의 의미를 알아야 한다.
			xml 문서를 만드는 사람이 태그의 순서, 의미를 지정하는 문서가 따로 존재한다.
			이 문서를 "DTD" 혹은 "스키마 문서" 라고 한다.
			
			
환경 설정
	1. Welcome 파일 수정하기
		Welcome 파일이란?
		클라이언트가 파일의 이름을 지정하지 않아도
		자동으로 응답할 파일을 말하는 것이다.
		
		방법 ]
			1) web.xml 파일에서
			2) <welcome-file-list> 의 내용을 수정하면 된다.
			
---------------------------------------------------------------------------------------
참고 ]
XML 문서
	
	문서의 첫행을 반드시
		<?xml version="1.0" encoding="UTF-8"?>
	로 시작해야 한다.
	루트태그는 반드시 하나여야만 한다.
	하위태그는 중복해서 여러개가 와도 상관없다.	

---------------------------------------------------------------------------------------
접속 프로젝트 이름 바꾸기
	==> 만약 프로젝트 이름을 노출하기 싫으면 접속 프로젝트를 변경할 수 있다.
	
	방법 ]
		1. server.xml 파일을 연다.
		2. <Context docBase="coffee" path="/coffee" reloadable="true" source="org.eclipse.jst.jee.server:coffee"/>
			에서 path 부분을 수정하면 된다.
		
---------------------------------------------------------------------------------------
포트 번호 바꾸기
	==> HTTP 프로토콜이 사용하는 기본포트는 80 포트이다.
		따라서 서비스를 요청할 때 따로 포트를 기술하지 않으면
		기본포트를 사용해서 요청하게 되고 기본포트를 사용해서 응답하게 된다.
		
		그런데 경우에 따라서는 포트가 충돌이 날 경우가 생기기 때문에
		이런 경우는 포트번호를 변경해야 한다.
		톰캣의 경우는 톰캣이 웹서버가 아니고
		웹 어플리케이션 서버이기 때문에 기본 포트를 8080으로 기본 설정이 되어있다.
		따라서 필요한 경우는 이 포트를 변경해서 사용하면 된다.
		
		방법 ]
			1. server.xml 파일을 연다.
			2. <Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>
				태그를 찾아서
					port="8080" 의 숫자 부분을 수정하면 된다.
					
중요 ]
	JSP 테스트는 서버에서 응답하는 문서를 만드는 것이므로...
	반드시 서버를 기동하고
	클라이언트가 요청해서 테스트가 되어야 한다.
	
결론적으로
	앞으로 우리는 웹 서버가 실행해서 클라이언트에게 응답하는
	문서(html 문서)를 만드는 방법에 대해서 공부할 것이다.
	
	따라서 테스트는 반드시 클라이언트의 요청에 의해서
	응답 받는 방식으로 테스트를 해야만 한다.
	반드시 웹 브라우저에서 서버에게 요청하는 방식으로
	테스트가 이루어져야 한다.
	
	형식 ]
		http://localhost/cafe/?????? 

















